// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BLUE_BERRY {
namespace Test {

namespace {

const ::google::protobuf::Descriptor* TestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestMessage_SmallType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginAns_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  TestMessage_descriptor_ = file->message_type(0);
  static const int TestMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, teststring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, testuint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, testsmalltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, testtesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, testbool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, testint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, testuint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, testfloat_),
  };
  TestMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestMessage_descriptor_,
      TestMessage::default_instance_,
      TestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(TestMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _internal_metadata_),
      -1);
  TestMessage_SmallType_descriptor_ = TestMessage_descriptor_->enum_type(0);
  LoginReq_descriptor_ = file->message_type(1);
  static const int LoginReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, id_),
  };
  LoginReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _internal_metadata_),
      -1);
  LoginAns_descriptor_ = file->message_type(2);
  static const int LoginAns_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAns, err_),
  };
  LoginAns_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginAns_descriptor_,
      LoginAns::default_instance_,
      LoginAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAns, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginAns),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAns, _internal_metadata_),
      -1);
  TestType_descriptor_ = file->enum_type(0);
  ErrorCode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestMessage_descriptor_, &TestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginReq_descriptor_, &LoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginAns_descriptor_, &LoginAns::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete TestMessage::default_instance_;
  delete TestMessage_reflection_;
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
  delete LoginAns::default_instance_;
  delete LoginAns_reflection_;
}

void protobuf_AddDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\022\017BLUE_BERRY.Test\"\246\002\n\013TestMe"
    "ssage\022\022\n\ntestString\030\001 \002(\t\022\022\n\ntestUint32\030"
    "\002 \002(\r\022=\n\rtestSmallType\030\003 \002(\0162&.BLUE_BERR"
    "Y.Test.TestMessage.SmallType\0227\n\014testTest"
    "Type\030\004 \001(\0162\031.BLUE_BERRY.Test.TestType:\006T"
    "YPE_1\022\020\n\010testBool\030\005 \002(\010\022\021\n\ttestInt32\030\006 \002"
    "(\005\022\022\n\ntestUint64\030\007 \001(\004\022\021\n\ttestFloat\030\010 \001("
    "\002\"+\n\tSmallType\022\n\n\006NORMAL\020\000\022\010\n\004HARD\020\001\022\010\n\004"
    "HELL\020\002\"\026\n\010LoginReq\022\n\n\002id\030\001 \002(\t\"3\n\010LoginA"
    "ns\022\'\n\003err\030\001 \002(\0162\032.BLUE_BERRY.Test.ErrorC"
    "ode*.\n\010TestType\022\n\n\006TYPE_1\020\000\022\n\n\006TYPE_2\020\001\022"
    "\n\n\006TYPE_3\020\002*G\n\tErrorCode\022\017\n\013ERR_SUCCESS\020"
    "\000\022\022\n\016ERR_LOGIN_FAIL\020\001\022\025\n\021ERR_ARGUMENT_FA"
    "IL\020\002", 524);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  TestMessage::default_instance_ = new TestMessage();
  LoginReq::default_instance_ = new LoginReq();
  LoginAns::default_instance_ = new LoginAns();
  TestMessage::default_instance_->InitAsDefaultInstance();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginAns::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;
const ::google::protobuf::EnumDescriptor* TestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestType_descriptor_;
}
bool TestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TestMessage_SmallType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_SmallType_descriptor_;
}
bool TestMessage_SmallType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TestMessage_SmallType TestMessage::NORMAL;
const TestMessage_SmallType TestMessage::HARD;
const TestMessage_SmallType TestMessage::HELL;
const TestMessage_SmallType TestMessage::SmallType_MIN;
const TestMessage_SmallType TestMessage::SmallType_MAX;
const int TestMessage::SmallType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestMessage::kTestStringFieldNumber;
const int TestMessage::kTestUint32FieldNumber;
const int TestMessage::kTestSmallTypeFieldNumber;
const int TestMessage::kTestTestTypeFieldNumber;
const int TestMessage::kTestBoolFieldNumber;
const int TestMessage::kTestInt32FieldNumber;
const int TestMessage::kTestUint64FieldNumber;
const int TestMessage::kTestFloatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestMessage::TestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLUE_BERRY.Test.TestMessage)
}

void TestMessage::InitAsDefaultInstance() {
}

TestMessage::TestMessage(const TestMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BLUE_BERRY.Test.TestMessage)
}

void TestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teststring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  testuint32_ = 0u;
  testsmalltype_ = 0;
  testtesttype_ = 0;
  testbool_ = false;
  testint32_ = 0;
  testuint64_ = GOOGLE_ULONGLONG(0);
  testfloat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:BLUE_BERRY.Test.TestMessage)
  SharedDtor();
}

void TestMessage::SharedDtor() {
  teststring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_descriptor_;
}

const TestMessage& TestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

TestMessage* TestMessage::default_instance_ = NULL;

TestMessage* TestMessage::New(::google::protobuf::Arena* arena) const {
  TestMessage* n = new TestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BLUE_BERRY.Test.TestMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TestMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TestMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(testuint32_, testfloat_);
    if (has_teststring()) {
      teststring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BLUE_BERRY.Test.TestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string testString = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teststring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teststring().data(), this->teststring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BLUE_BERRY.Test.TestMessage.testString");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_testUint32;
        break;
      }

      // required uint32 testUint32 = 2;
      case 2: {
        if (tag == 16) {
         parse_testUint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &testuint32_)));
          set_has_testuint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_testSmallType;
        break;
      }

      // required .BLUE_BERRY.Test.TestMessage.SmallType testSmallType = 3;
      case 3: {
        if (tag == 24) {
         parse_testSmallType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BLUE_BERRY::Test::TestMessage_SmallType_IsValid(value)) {
            set_testsmalltype(static_cast< ::BLUE_BERRY::Test::TestMessage_SmallType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_testTestType;
        break;
      }

      // optional .BLUE_BERRY.Test.TestType testTestType = 4 [default = TYPE_1];
      case 4: {
        if (tag == 32) {
         parse_testTestType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BLUE_BERRY::Test::TestType_IsValid(value)) {
            set_testtesttype(static_cast< ::BLUE_BERRY::Test::TestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_testBool;
        break;
      }

      // required bool testBool = 5;
      case 5: {
        if (tag == 40) {
         parse_testBool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &testbool_)));
          set_has_testbool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_testInt32;
        break;
      }

      // required int32 testInt32 = 6;
      case 6: {
        if (tag == 48) {
         parse_testInt32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testint32_)));
          set_has_testint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_testUint64;
        break;
      }

      // optional uint64 testUint64 = 7;
      case 7: {
        if (tag == 56) {
         parse_testUint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &testuint64_)));
          set_has_testuint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_testFloat;
        break;
      }

      // optional float testFloat = 8;
      case 8: {
        if (tag == 69) {
         parse_testFloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &testfloat_)));
          set_has_testfloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BLUE_BERRY.Test.TestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BLUE_BERRY.Test.TestMessage)
  return false;
#undef DO_
}

void TestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BLUE_BERRY.Test.TestMessage)
  // required string testString = 1;
  if (has_teststring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teststring().data(), this->teststring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BLUE_BERRY.Test.TestMessage.testString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->teststring(), output);
  }

  // required uint32 testUint32 = 2;
  if (has_testuint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->testuint32(), output);
  }

  // required .BLUE_BERRY.Test.TestMessage.SmallType testSmallType = 3;
  if (has_testsmalltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->testsmalltype(), output);
  }

  // optional .BLUE_BERRY.Test.TestType testTestType = 4 [default = TYPE_1];
  if (has_testtesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->testtesttype(), output);
  }

  // required bool testBool = 5;
  if (has_testbool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->testbool(), output);
  }

  // required int32 testInt32 = 6;
  if (has_testint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->testint32(), output);
  }

  // optional uint64 testUint64 = 7;
  if (has_testuint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->testuint64(), output);
  }

  // optional float testFloat = 8;
  if (has_testfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->testfloat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BLUE_BERRY.Test.TestMessage)
}

::google::protobuf::uint8* TestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLUE_BERRY.Test.TestMessage)
  // required string testString = 1;
  if (has_teststring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teststring().data(), this->teststring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BLUE_BERRY.Test.TestMessage.testString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->teststring(), target);
  }

  // required uint32 testUint32 = 2;
  if (has_testuint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->testuint32(), target);
  }

  // required .BLUE_BERRY.Test.TestMessage.SmallType testSmallType = 3;
  if (has_testsmalltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->testsmalltype(), target);
  }

  // optional .BLUE_BERRY.Test.TestType testTestType = 4 [default = TYPE_1];
  if (has_testtesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->testtesttype(), target);
  }

  // required bool testBool = 5;
  if (has_testbool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->testbool(), target);
  }

  // required int32 testInt32 = 6;
  if (has_testint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->testint32(), target);
  }

  // optional uint64 testUint64 = 7;
  if (has_testuint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->testuint64(), target);
  }

  // optional float testFloat = 8;
  if (has_testfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->testfloat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BLUE_BERRY.Test.TestMessage)
  return target;
}

int TestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BLUE_BERRY.Test.TestMessage)
  int total_size = 0;

  if (has_teststring()) {
    // required string testString = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->teststring());
  }

  if (has_testuint32()) {
    // required uint32 testUint32 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->testuint32());
  }

  if (has_testsmalltype()) {
    // required .BLUE_BERRY.Test.TestMessage.SmallType testSmallType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->testsmalltype());
  }

  if (has_testbool()) {
    // required bool testBool = 5;
    total_size += 1 + 1;
  }

  if (has_testint32()) {
    // required int32 testInt32 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->testint32());
  }

  return total_size;
}
int TestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BLUE_BERRY.Test.TestMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required string testString = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->teststring());

    // required uint32 testUint32 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->testuint32());

    // required .BLUE_BERRY.Test.TestMessage.SmallType testSmallType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->testsmalltype());

    // required bool testBool = 5;
    total_size += 1 + 1;

    // required int32 testInt32 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->testint32());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 200u) {
    // optional .BLUE_BERRY.Test.TestType testTestType = 4 [default = TYPE_1];
    if (has_testtesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->testtesttype());
    }

    // optional uint64 testUint64 = 7;
    if (has_testuint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->testuint64());
    }

    // optional float testFloat = 8;
    if (has_testfloat()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLUE_BERRY.Test.TestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLUE_BERRY.Test.TestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLUE_BERRY.Test.TestMessage)
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLUE_BERRY.Test.TestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teststring()) {
      set_has_teststring();
      teststring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teststring_);
    }
    if (from.has_testuint32()) {
      set_testuint32(from.testuint32());
    }
    if (from.has_testsmalltype()) {
      set_testsmalltype(from.testsmalltype());
    }
    if (from.has_testtesttype()) {
      set_testtesttype(from.testtesttype());
    }
    if (from.has_testbool()) {
      set_testbool(from.testbool());
    }
    if (from.has_testint32()) {
      set_testint32(from.testint32());
    }
    if (from.has_testuint64()) {
      set_testuint64(from.testuint64());
    }
    if (from.has_testfloat()) {
      set_testfloat(from.testfloat());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLUE_BERRY.Test.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLUE_BERRY.Test.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  return true;
}

void TestMessage::Swap(TestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestMessage::InternalSwap(TestMessage* other) {
  teststring_.Swap(&other->teststring_);
  std::swap(testuint32_, other->testuint32_);
  std::swap(testsmalltype_, other->testsmalltype_);
  std::swap(testtesttype_, other->testtesttype_);
  std::swap(testbool_, other->testbool_);
  std::swap(testint32_, other->testint32_);
  std::swap(testuint64_, other->testuint64_);
  std::swap(testfloat_, other->testfloat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessage_descriptor_;
  metadata.reflection = TestMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestMessage

// required string testString = 1;
bool TestMessage::has_teststring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestMessage::set_has_teststring() {
  _has_bits_[0] |= 0x00000001u;
}
void TestMessage::clear_has_teststring() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestMessage::clear_teststring() {
  teststring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teststring();
}
 const ::std::string& TestMessage::teststring() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.TestMessage.testString)
  return teststring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestMessage::set_teststring(const ::std::string& value) {
  set_has_teststring();
  teststring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.TestMessage.testString)
}
 void TestMessage::set_teststring(const char* value) {
  set_has_teststring();
  teststring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLUE_BERRY.Test.TestMessage.testString)
}
 void TestMessage::set_teststring(const char* value, size_t size) {
  set_has_teststring();
  teststring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLUE_BERRY.Test.TestMessage.testString)
}
 ::std::string* TestMessage::mutable_teststring() {
  set_has_teststring();
  // @@protoc_insertion_point(field_mutable:BLUE_BERRY.Test.TestMessage.testString)
  return teststring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestMessage::release_teststring() {
  // @@protoc_insertion_point(field_release:BLUE_BERRY.Test.TestMessage.testString)
  clear_has_teststring();
  return teststring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestMessage::set_allocated_teststring(::std::string* teststring) {
  if (teststring != NULL) {
    set_has_teststring();
  } else {
    clear_has_teststring();
  }
  teststring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teststring);
  // @@protoc_insertion_point(field_set_allocated:BLUE_BERRY.Test.TestMessage.testString)
}

// required uint32 testUint32 = 2;
bool TestMessage::has_testuint32() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TestMessage::set_has_testuint32() {
  _has_bits_[0] |= 0x00000002u;
}
void TestMessage::clear_has_testuint32() {
  _has_bits_[0] &= ~0x00000002u;
}
void TestMessage::clear_testuint32() {
  testuint32_ = 0u;
  clear_has_testuint32();
}
 ::google::protobuf::uint32 TestMessage::testuint32() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.TestMessage.testUint32)
  return testuint32_;
}
 void TestMessage::set_testuint32(::google::protobuf::uint32 value) {
  set_has_testuint32();
  testuint32_ = value;
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.TestMessage.testUint32)
}

// required .BLUE_BERRY.Test.TestMessage.SmallType testSmallType = 3;
bool TestMessage::has_testsmalltype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TestMessage::set_has_testsmalltype() {
  _has_bits_[0] |= 0x00000004u;
}
void TestMessage::clear_has_testsmalltype() {
  _has_bits_[0] &= ~0x00000004u;
}
void TestMessage::clear_testsmalltype() {
  testsmalltype_ = 0;
  clear_has_testsmalltype();
}
 ::BLUE_BERRY::Test::TestMessage_SmallType TestMessage::testsmalltype() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.TestMessage.testSmallType)
  return static_cast< ::BLUE_BERRY::Test::TestMessage_SmallType >(testsmalltype_);
}
 void TestMessage::set_testsmalltype(::BLUE_BERRY::Test::TestMessage_SmallType value) {
  assert(::BLUE_BERRY::Test::TestMessage_SmallType_IsValid(value));
  set_has_testsmalltype();
  testsmalltype_ = value;
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.TestMessage.testSmallType)
}

// optional .BLUE_BERRY.Test.TestType testTestType = 4 [default = TYPE_1];
bool TestMessage::has_testtesttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TestMessage::set_has_testtesttype() {
  _has_bits_[0] |= 0x00000008u;
}
void TestMessage::clear_has_testtesttype() {
  _has_bits_[0] &= ~0x00000008u;
}
void TestMessage::clear_testtesttype() {
  testtesttype_ = 0;
  clear_has_testtesttype();
}
 ::BLUE_BERRY::Test::TestType TestMessage::testtesttype() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.TestMessage.testTestType)
  return static_cast< ::BLUE_BERRY::Test::TestType >(testtesttype_);
}
 void TestMessage::set_testtesttype(::BLUE_BERRY::Test::TestType value) {
  assert(::BLUE_BERRY::Test::TestType_IsValid(value));
  set_has_testtesttype();
  testtesttype_ = value;
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.TestMessage.testTestType)
}

// required bool testBool = 5;
bool TestMessage::has_testbool() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TestMessage::set_has_testbool() {
  _has_bits_[0] |= 0x00000010u;
}
void TestMessage::clear_has_testbool() {
  _has_bits_[0] &= ~0x00000010u;
}
void TestMessage::clear_testbool() {
  testbool_ = false;
  clear_has_testbool();
}
 bool TestMessage::testbool() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.TestMessage.testBool)
  return testbool_;
}
 void TestMessage::set_testbool(bool value) {
  set_has_testbool();
  testbool_ = value;
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.TestMessage.testBool)
}

// required int32 testInt32 = 6;
bool TestMessage::has_testint32() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TestMessage::set_has_testint32() {
  _has_bits_[0] |= 0x00000020u;
}
void TestMessage::clear_has_testint32() {
  _has_bits_[0] &= ~0x00000020u;
}
void TestMessage::clear_testint32() {
  testint32_ = 0;
  clear_has_testint32();
}
 ::google::protobuf::int32 TestMessage::testint32() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.TestMessage.testInt32)
  return testint32_;
}
 void TestMessage::set_testint32(::google::protobuf::int32 value) {
  set_has_testint32();
  testint32_ = value;
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.TestMessage.testInt32)
}

// optional uint64 testUint64 = 7;
bool TestMessage::has_testuint64() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TestMessage::set_has_testuint64() {
  _has_bits_[0] |= 0x00000040u;
}
void TestMessage::clear_has_testuint64() {
  _has_bits_[0] &= ~0x00000040u;
}
void TestMessage::clear_testuint64() {
  testuint64_ = GOOGLE_ULONGLONG(0);
  clear_has_testuint64();
}
 ::google::protobuf::uint64 TestMessage::testuint64() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.TestMessage.testUint64)
  return testuint64_;
}
 void TestMessage::set_testuint64(::google::protobuf::uint64 value) {
  set_has_testuint64();
  testuint64_ = value;
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.TestMessage.testUint64)
}

// optional float testFloat = 8;
bool TestMessage::has_testfloat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TestMessage::set_has_testfloat() {
  _has_bits_[0] |= 0x00000080u;
}
void TestMessage::clear_has_testfloat() {
  _has_bits_[0] &= ~0x00000080u;
}
void TestMessage::clear_testfloat() {
  testfloat_ = 0;
  clear_has_testfloat();
}
 float TestMessage::testfloat() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.TestMessage.testFloat)
  return testfloat_;
}
 void TestMessage::set_testfloat(float value) {
  set_has_testfloat();
  testfloat_ = value;
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.TestMessage.testFloat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReq::LoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLUE_BERRY.Test.LoginReq)
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BLUE_BERRY.Test.LoginReq)
}

void LoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:BLUE_BERRY.Test.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New(::google::protobuf::Arena* arena) const {
  LoginReq* n = new LoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BLUE_BERRY.Test.LoginReq)
  if (has_id()) {
    id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BLUE_BERRY.Test.LoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BLUE_BERRY.Test.LoginReq.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BLUE_BERRY.Test.LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BLUE_BERRY.Test.LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BLUE_BERRY.Test.LoginReq)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BLUE_BERRY.Test.LoginReq.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BLUE_BERRY.Test.LoginReq)
}

::google::protobuf::uint8* LoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLUE_BERRY.Test.LoginReq)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BLUE_BERRY.Test.LoginReq.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BLUE_BERRY.Test.LoginReq)
  return target;
}

int LoginReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BLUE_BERRY.Test.LoginReq)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLUE_BERRY.Test.LoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLUE_BERRY.Test.LoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLUE_BERRY.Test.LoginReq)
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLUE_BERRY.Test.LoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLUE_BERRY.Test.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLUE_BERRY.Test.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReq::InternalSwap(LoginReq* other) {
  id_.Swap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReq

// required string id = 1;
bool LoginReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginReq::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& LoginReq::id() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.LoginReq.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginReq::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.LoginReq.id)
}
 void LoginReq::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLUE_BERRY.Test.LoginReq.id)
}
 void LoginReq::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLUE_BERRY.Test.LoginReq.id)
}
 ::std::string* LoginReq::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:BLUE_BERRY.Test.LoginReq.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginReq::release_id() {
  // @@protoc_insertion_point(field_release:BLUE_BERRY.Test.LoginReq.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginReq::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:BLUE_BERRY.Test.LoginReq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAns::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAns::LoginAns()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLUE_BERRY.Test.LoginAns)
}

void LoginAns::InitAsDefaultInstance() {
}

LoginAns::LoginAns(const LoginAns& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BLUE_BERRY.Test.LoginAns)
}

void LoginAns::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAns::~LoginAns() {
  // @@protoc_insertion_point(destructor:BLUE_BERRY.Test.LoginAns)
  SharedDtor();
}

void LoginAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginAns_descriptor_;
}

const LoginAns& LoginAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

LoginAns* LoginAns::default_instance_ = NULL;

LoginAns* LoginAns::New(::google::protobuf::Arena* arena) const {
  LoginAns* n = new LoginAns;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAns::Clear() {
// @@protoc_insertion_point(message_clear_start:BLUE_BERRY.Test.LoginAns)
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BLUE_BERRY.Test.LoginAns)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BLUE_BERRY.Test.ErrorCode err = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BLUE_BERRY::Test::ErrorCode_IsValid(value)) {
            set_err(static_cast< ::BLUE_BERRY::Test::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BLUE_BERRY.Test.LoginAns)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BLUE_BERRY.Test.LoginAns)
  return false;
#undef DO_
}

void LoginAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BLUE_BERRY.Test.LoginAns)
  // required .BLUE_BERRY.Test.ErrorCode err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->err(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BLUE_BERRY.Test.LoginAns)
}

::google::protobuf::uint8* LoginAns::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLUE_BERRY.Test.LoginAns)
  // required .BLUE_BERRY.Test.ErrorCode err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->err(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BLUE_BERRY.Test.LoginAns)
  return target;
}

int LoginAns::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BLUE_BERRY.Test.LoginAns)
  int total_size = 0;

  // required .BLUE_BERRY.Test.ErrorCode err = 1;
  if (has_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->err());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAns::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLUE_BERRY.Test.LoginAns)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginAns* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAns>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLUE_BERRY.Test.LoginAns)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLUE_BERRY.Test.LoginAns)
    MergeFrom(*source);
  }
}

void LoginAns::MergeFrom(const LoginAns& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLUE_BERRY.Test.LoginAns)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginAns::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLUE_BERRY.Test.LoginAns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAns::CopyFrom(const LoginAns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLUE_BERRY.Test.LoginAns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginAns::Swap(LoginAns* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAns::InternalSwap(LoginAns* other) {
  std::swap(err_, other->err_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginAns_descriptor_;
  metadata.reflection = LoginAns_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginAns

// required .BLUE_BERRY.Test.ErrorCode err = 1;
bool LoginAns::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginAns::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginAns::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginAns::clear_err() {
  err_ = 0;
  clear_has_err();
}
 ::BLUE_BERRY::Test::ErrorCode LoginAns::err() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.LoginAns.err)
  return static_cast< ::BLUE_BERRY::Test::ErrorCode >(err_);
}
 void LoginAns::set_err(::BLUE_BERRY::Test::ErrorCode value) {
  assert(::BLUE_BERRY::Test::ErrorCode_IsValid(value));
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.LoginAns.err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Test
}  // namespace BLUE_BERRY

// @@protoc_insertion_point(global_scope)
