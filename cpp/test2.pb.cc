// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BLUE_BERRY {
namespace Test {

namespace {

const ::google::protobuf::Descriptor* PingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PongAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PongAns_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test2_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test2_2eproto() {
  protobuf_AddDesc_test2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test2.proto");
  GOOGLE_CHECK(file != NULL);
  PingReq_descriptor_ = file->message_type(0);
  static const int PingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReq, dummy_),
  };
  PingReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PingReq_descriptor_,
      PingReq::default_instance_,
      PingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(PingReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReq, _internal_metadata_),
      -1);
  PongAns_descriptor_ = file->message_type(1);
  static const int PongAns_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongAns, err_),
  };
  PongAns_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PongAns_descriptor_,
      PongAns::default_instance_,
      PongAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongAns, _has_bits_[0]),
      -1,
      -1,
      sizeof(PongAns),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongAns, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PingReq_descriptor_, &PingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PongAns_descriptor_, &PongAns::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test2_2eproto() {
  delete PingReq::default_instance_;
  delete PingReq_reflection_;
  delete PongAns::default_instance_;
  delete PongAns_reflection_;
}

void protobuf_AddDesc_test2_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_test2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::BLUE_BERRY::Test::protobuf_AddDesc_test_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013test2.proto\022\017BLUE_BERRY.Test\032\ntest.pro"
    "to\"\030\n\007PingReq\022\r\n\005dummy\030\001 \002(\r\"2\n\007PongAns\022"
    "\'\n\003err\030\001 \002(\0162\032.BLUE_BERRY.Test.ErrorCode", 120);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test2.proto", &protobuf_RegisterTypes);
  PingReq::default_instance_ = new PingReq();
  PongAns::default_instance_ = new PongAns();
  PingReq::default_instance_->InitAsDefaultInstance();
  PongAns::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test2_2eproto {
  StaticDescriptorInitializer_test2_2eproto() {
    protobuf_AddDesc_test2_2eproto();
  }
} static_descriptor_initializer_test2_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingReq::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingReq::PingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLUE_BERRY.Test.PingReq)
}

void PingReq::InitAsDefaultInstance() {
}

PingReq::PingReq(const PingReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BLUE_BERRY.Test.PingReq)
}

void PingReq::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingReq::~PingReq() {
  // @@protoc_insertion_point(destructor:BLUE_BERRY.Test.PingReq)
  SharedDtor();
}

void PingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingReq_descriptor_;
}

const PingReq& PingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test2_2eproto();
  return *default_instance_;
}

PingReq* PingReq::default_instance_ = NULL;

PingReq* PingReq::New(::google::protobuf::Arena* arena) const {
  PingReq* n = new PingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BLUE_BERRY.Test.PingReq)
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BLUE_BERRY.Test.PingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BLUE_BERRY.Test.PingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BLUE_BERRY.Test.PingReq)
  return false;
#undef DO_
}

void PingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BLUE_BERRY.Test.PingReq)
  // required uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BLUE_BERRY.Test.PingReq)
}

::google::protobuf::uint8* PingReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLUE_BERRY.Test.PingReq)
  // required uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BLUE_BERRY.Test.PingReq)
  return target;
}

int PingReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BLUE_BERRY.Test.PingReq)
  int total_size = 0;

  // required uint32 dummy = 1;
  if (has_dummy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dummy());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLUE_BERRY.Test.PingReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PingReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PingReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLUE_BERRY.Test.PingReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLUE_BERRY.Test.PingReq)
    MergeFrom(*source);
  }
}

void PingReq::MergeFrom(const PingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLUE_BERRY.Test.PingReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PingReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLUE_BERRY.Test.PingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingReq::CopyFrom(const PingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLUE_BERRY.Test.PingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PingReq::Swap(PingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingReq::InternalSwap(PingReq* other) {
  std::swap(dummy_, other->dummy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingReq_descriptor_;
  metadata.reflection = PingReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingReq

// required uint32 dummy = 1;
bool PingReq::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PingReq::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
void PingReq::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
void PingReq::clear_dummy() {
  dummy_ = 0u;
  clear_has_dummy();
}
 ::google::protobuf::uint32 PingReq::dummy() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.PingReq.dummy)
  return dummy_;
}
 void PingReq::set_dummy(::google::protobuf::uint32 value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.PingReq.dummy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PongAns::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PongAns::PongAns()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLUE_BERRY.Test.PongAns)
}

void PongAns::InitAsDefaultInstance() {
}

PongAns::PongAns(const PongAns& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BLUE_BERRY.Test.PongAns)
}

void PongAns::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PongAns::~PongAns() {
  // @@protoc_insertion_point(destructor:BLUE_BERRY.Test.PongAns)
  SharedDtor();
}

void PongAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PongAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PongAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PongAns_descriptor_;
}

const PongAns& PongAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test2_2eproto();
  return *default_instance_;
}

PongAns* PongAns::default_instance_ = NULL;

PongAns* PongAns::New(::google::protobuf::Arena* arena) const {
  PongAns* n = new PongAns;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PongAns::Clear() {
// @@protoc_insertion_point(message_clear_start:BLUE_BERRY.Test.PongAns)
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PongAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BLUE_BERRY.Test.PongAns)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BLUE_BERRY.Test.ErrorCode err = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BLUE_BERRY::Test::ErrorCode_IsValid(value)) {
            set_err(static_cast< ::BLUE_BERRY::Test::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BLUE_BERRY.Test.PongAns)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BLUE_BERRY.Test.PongAns)
  return false;
#undef DO_
}

void PongAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BLUE_BERRY.Test.PongAns)
  // required .BLUE_BERRY.Test.ErrorCode err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->err(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BLUE_BERRY.Test.PongAns)
}

::google::protobuf::uint8* PongAns::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLUE_BERRY.Test.PongAns)
  // required .BLUE_BERRY.Test.ErrorCode err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->err(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BLUE_BERRY.Test.PongAns)
  return target;
}

int PongAns::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BLUE_BERRY.Test.PongAns)
  int total_size = 0;

  // required .BLUE_BERRY.Test.ErrorCode err = 1;
  if (has_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->err());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PongAns::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLUE_BERRY.Test.PongAns)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PongAns* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PongAns>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLUE_BERRY.Test.PongAns)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLUE_BERRY.Test.PongAns)
    MergeFrom(*source);
  }
}

void PongAns::MergeFrom(const PongAns& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLUE_BERRY.Test.PongAns)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PongAns::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLUE_BERRY.Test.PongAns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PongAns::CopyFrom(const PongAns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLUE_BERRY.Test.PongAns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PongAns::Swap(PongAns* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PongAns::InternalSwap(PongAns* other) {
  std::swap(err_, other->err_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PongAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PongAns_descriptor_;
  metadata.reflection = PongAns_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PongAns

// required .BLUE_BERRY.Test.ErrorCode err = 1;
bool PongAns::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PongAns::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
void PongAns::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
void PongAns::clear_err() {
  err_ = 0;
  clear_has_err();
}
 ::BLUE_BERRY::Test::ErrorCode PongAns::err() const {
  // @@protoc_insertion_point(field_get:BLUE_BERRY.Test.PongAns.err)
  return static_cast< ::BLUE_BERRY::Test::ErrorCode >(err_);
}
 void PongAns::set_err(::BLUE_BERRY::Test::ErrorCode value) {
  assert(::BLUE_BERRY::Test::ErrorCode_IsValid(value));
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:BLUE_BERRY.Test.PongAns.err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Test
}  // namespace BLUE_BERRY

// @@protoc_insertion_point(global_scope)
