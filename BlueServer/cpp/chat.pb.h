// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace MSG {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class ChatAns;
class ChatNot;
class ChatReq;
class CreateChatRoomAns;
class CreateChatRoomReq;
class EnterChatRoomAns;
class EnterChatRoomNot;
class EnterChatRoomReq;
class InviteChatRoomAns;
class InviteChatRoomNot;
class InviteChatRoomReq;
class LeaveChatRoomAns;
class LeaveChatRoomNot;
class LeaveChatRoomReq;

// ===================================================================

class ChatReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.ChatReq) */ {
 public:
  ChatReq();
  virtual ~ChatReq();

  ChatReq(const ChatReq& from);

  inline ChatReq& operator=(const ChatReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatReq& default_instance();

  void Swap(ChatReq* other);

  // implements Message ----------------------------------------------

  inline ChatReq* New() const { return New(NULL); }

  ChatReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatReq& from);
  void MergeFrom(const ChatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .MSG.ChatType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::MSG::ChatType type() const;
  void set_type(::MSG::ChatType value);

  // @@protoc_insertion_point(class_scope:MSG.ChatReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatReq* default_instance_;
};
// -------------------------------------------------------------------

class ChatAns : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.ChatAns) */ {
 public:
  ChatAns();
  virtual ~ChatAns();

  ChatAns(const ChatAns& from);

  inline ChatAns& operator=(const ChatAns& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatAns& default_instance();

  void Swap(ChatAns* other);

  // implements Message ----------------------------------------------

  inline ChatAns* New() const { return New(NULL); }

  ChatAns* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatAns& from);
  void MergeFrom(const ChatAns& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatAns* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MSG.ErrorCode err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::MSG::ErrorCode err() const;
  void set_err(::MSG::ErrorCode value);

  // @@protoc_insertion_point(class_scope:MSG.ChatAns)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int err_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatAns* default_instance_;
};
// -------------------------------------------------------------------

class ChatNot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.ChatNot) */ {
 public:
  ChatNot();
  virtual ~ChatNot();

  ChatNot(const ChatNot& from);

  inline ChatNot& operator=(const ChatNot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatNot& default_instance();

  void Swap(ChatNot* other);

  // implements Message ----------------------------------------------

  inline ChatNot* New() const { return New(NULL); }

  ChatNot* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatNot& from);
  void MergeFrom(const ChatNot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatNot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MSG.ChatData_ chats = 1;
  bool has_chats() const;
  void clear_chats();
  static const int kChatsFieldNumber = 1;
  const ::MSG::ChatData_& chats() const;
  ::MSG::ChatData_* mutable_chats();
  ::MSG::ChatData_* release_chats();
  void set_allocated_chats(::MSG::ChatData_* chats);

  // optional .MSG.ChatType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::MSG::ChatType type() const;
  void set_type(::MSG::ChatType value);

  // @@protoc_insertion_point(class_scope:MSG.ChatNot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::MSG::ChatData_* chats_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatNot* default_instance_;
};
// -------------------------------------------------------------------

class CreateChatRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.CreateChatRoomReq) */ {
 public:
  CreateChatRoomReq();
  virtual ~CreateChatRoomReq();

  CreateChatRoomReq(const CreateChatRoomReq& from);

  inline CreateChatRoomReq& operator=(const CreateChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChatRoomReq& default_instance();

  void Swap(CreateChatRoomReq* other);

  // implements Message ----------------------------------------------

  inline CreateChatRoomReq* New() const { return New(NULL); }

  CreateChatRoomReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateChatRoomReq& from);
  void MergeFrom(const CreateChatRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateChatRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string greeting = 2;
  void clear_greeting();
  static const int kGreetingFieldNumber = 2;
  const ::std::string& greeting() const;
  void set_greeting(const ::std::string& value);
  void set_greeting(const char* value);
  void set_greeting(const char* value, size_t size);
  ::std::string* mutable_greeting();
  ::std::string* release_greeting();
  void set_allocated_greeting(::std::string* greeting);

  // @@protoc_insertion_point(class_scope:MSG.CreateChatRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr greeting_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static CreateChatRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class CreateChatRoomAns : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.CreateChatRoomAns) */ {
 public:
  CreateChatRoomAns();
  virtual ~CreateChatRoomAns();

  CreateChatRoomAns(const CreateChatRoomAns& from);

  inline CreateChatRoomAns& operator=(const CreateChatRoomAns& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChatRoomAns& default_instance();

  void Swap(CreateChatRoomAns* other);

  // implements Message ----------------------------------------------

  inline CreateChatRoomAns* New() const { return New(NULL); }

  CreateChatRoomAns* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateChatRoomAns& from);
  void MergeFrom(const CreateChatRoomAns& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateChatRoomAns* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MSG.ErrorCode err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::MSG::ErrorCode err() const;
  void set_err(::MSG::ErrorCode value);

  // optional uint64 rid = 2;
  void clear_rid();
  static const int kRidFieldNumber = 2;
  ::google::protobuf::uint64 rid() const;
  void set_rid(::google::protobuf::uint64 value);

  // optional string rkey = 3;
  void clear_rkey();
  static const int kRkeyFieldNumber = 3;
  const ::std::string& rkey() const;
  void set_rkey(const ::std::string& value);
  void set_rkey(const char* value);
  void set_rkey(const char* value, size_t size);
  ::std::string* mutable_rkey();
  ::std::string* release_rkey();
  void set_allocated_rkey(::std::string* rkey);

  // @@protoc_insertion_point(class_scope:MSG.CreateChatRoomAns)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::internal::ArenaStringPtr rkey_;
  int err_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static CreateChatRoomAns* default_instance_;
};
// -------------------------------------------------------------------

class InviteChatRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.InviteChatRoomReq) */ {
 public:
  InviteChatRoomReq();
  virtual ~InviteChatRoomReq();

  InviteChatRoomReq(const InviteChatRoomReq& from);

  inline InviteChatRoomReq& operator=(const InviteChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteChatRoomReq& default_instance();

  void Swap(InviteChatRoomReq* other);

  // implements Message ----------------------------------------------

  inline InviteChatRoomReq* New() const { return New(NULL); }

  InviteChatRoomReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteChatRoomReq& from);
  void MergeFrom(const InviteChatRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InviteChatRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  ::google::protobuf::uint64 rid() const;
  void set_rid(::google::protobuf::uint64 value);

  // optional string rkey = 2;
  void clear_rkey();
  static const int kRkeyFieldNumber = 2;
  const ::std::string& rkey() const;
  void set_rkey(const ::std::string& value);
  void set_rkey(const char* value);
  void set_rkey(const char* value, size_t size);
  ::std::string* mutable_rkey();
  ::std::string* release_rkey();
  void set_allocated_rkey(::std::string* rkey);

  // optional uint64 targetUid = 3;
  void clear_targetuid();
  static const int kTargetUidFieldNumber = 3;
  ::google::protobuf::uint64 targetuid() const;
  void set_targetuid(::google::protobuf::uint64 value);

  // optional string targetName = 4;
  void clear_targetname();
  static const int kTargetNameFieldNumber = 4;
  const ::std::string& targetname() const;
  void set_targetname(const ::std::string& value);
  void set_targetname(const char* value);
  void set_targetname(const char* value, size_t size);
  ::std::string* mutable_targetname();
  ::std::string* release_targetname();
  void set_allocated_targetname(::std::string* targetname);

  // @@protoc_insertion_point(class_scope:MSG.InviteChatRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::internal::ArenaStringPtr rkey_;
  ::google::protobuf::uint64 targetuid_;
  ::google::protobuf::internal::ArenaStringPtr targetname_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static InviteChatRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class InviteChatRoomAns : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.InviteChatRoomAns) */ {
 public:
  InviteChatRoomAns();
  virtual ~InviteChatRoomAns();

  InviteChatRoomAns(const InviteChatRoomAns& from);

  inline InviteChatRoomAns& operator=(const InviteChatRoomAns& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteChatRoomAns& default_instance();

  void Swap(InviteChatRoomAns* other);

  // implements Message ----------------------------------------------

  inline InviteChatRoomAns* New() const { return New(NULL); }

  InviteChatRoomAns* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteChatRoomAns& from);
  void MergeFrom(const InviteChatRoomAns& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InviteChatRoomAns* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MSG.ErrorCode err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::MSG::ErrorCode err() const;
  void set_err(::MSG::ErrorCode value);

  // @@protoc_insertion_point(class_scope:MSG.InviteChatRoomAns)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int err_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static InviteChatRoomAns* default_instance_;
};
// -------------------------------------------------------------------

class InviteChatRoomNot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.InviteChatRoomNot) */ {
 public:
  InviteChatRoomNot();
  virtual ~InviteChatRoomNot();

  InviteChatRoomNot(const InviteChatRoomNot& from);

  inline InviteChatRoomNot& operator=(const InviteChatRoomNot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteChatRoomNot& default_instance();

  void Swap(InviteChatRoomNot* other);

  // implements Message ----------------------------------------------

  inline InviteChatRoomNot* New() const { return New(NULL); }

  InviteChatRoomNot* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteChatRoomNot& from);
  void MergeFrom(const InviteChatRoomNot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InviteChatRoomNot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  ::google::protobuf::uint64 rid() const;
  void set_rid(::google::protobuf::uint64 value);

  // optional string rkey = 2;
  void clear_rkey();
  static const int kRkeyFieldNumber = 2;
  const ::std::string& rkey() const;
  void set_rkey(const ::std::string& value);
  void set_rkey(const char* value);
  void set_rkey(const char* value, size_t size);
  ::std::string* mutable_rkey();
  ::std::string* release_rkey();
  void set_allocated_rkey(::std::string* rkey);

  // optional uint64 ownerUid = 3;
  void clear_owneruid();
  static const int kOwnerUidFieldNumber = 3;
  ::google::protobuf::uint64 owneruid() const;
  void set_owneruid(::google::protobuf::uint64 value);

  // optional string ownerName = 4;
  void clear_ownername();
  static const int kOwnerNameFieldNumber = 4;
  const ::std::string& ownername() const;
  void set_ownername(const ::std::string& value);
  void set_ownername(const char* value);
  void set_ownername(const char* value, size_t size);
  ::std::string* mutable_ownername();
  ::std::string* release_ownername();
  void set_allocated_ownername(::std::string* ownername);

  // @@protoc_insertion_point(class_scope:MSG.InviteChatRoomNot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::internal::ArenaStringPtr rkey_;
  ::google::protobuf::uint64 owneruid_;
  ::google::protobuf::internal::ArenaStringPtr ownername_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static InviteChatRoomNot* default_instance_;
};
// -------------------------------------------------------------------

class EnterChatRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.EnterChatRoomReq) */ {
 public:
  EnterChatRoomReq();
  virtual ~EnterChatRoomReq();

  EnterChatRoomReq(const EnterChatRoomReq& from);

  inline EnterChatRoomReq& operator=(const EnterChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterChatRoomReq& default_instance();

  void Swap(EnterChatRoomReq* other);

  // implements Message ----------------------------------------------

  inline EnterChatRoomReq* New() const { return New(NULL); }

  EnterChatRoomReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterChatRoomReq& from);
  void MergeFrom(const EnterChatRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnterChatRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  ::google::protobuf::uint64 rid() const;
  void set_rid(::google::protobuf::uint64 value);

  // optional string rkey = 2;
  void clear_rkey();
  static const int kRkeyFieldNumber = 2;
  const ::std::string& rkey() const;
  void set_rkey(const ::std::string& value);
  void set_rkey(const char* value);
  void set_rkey(const char* value, size_t size);
  ::std::string* mutable_rkey();
  ::std::string* release_rkey();
  void set_allocated_rkey(::std::string* rkey);

  // @@protoc_insertion_point(class_scope:MSG.EnterChatRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::internal::ArenaStringPtr rkey_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static EnterChatRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class EnterChatRoomAns : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.EnterChatRoomAns) */ {
 public:
  EnterChatRoomAns();
  virtual ~EnterChatRoomAns();

  EnterChatRoomAns(const EnterChatRoomAns& from);

  inline EnterChatRoomAns& operator=(const EnterChatRoomAns& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterChatRoomAns& default_instance();

  void Swap(EnterChatRoomAns* other);

  // implements Message ----------------------------------------------

  inline EnterChatRoomAns* New() const { return New(NULL); }

  EnterChatRoomAns* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterChatRoomAns& from);
  void MergeFrom(const EnterChatRoomAns& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnterChatRoomAns* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MSG.ErrorCode err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::MSG::ErrorCode err() const;
  void set_err(::MSG::ErrorCode value);

  // @@protoc_insertion_point(class_scope:MSG.EnterChatRoomAns)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int err_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static EnterChatRoomAns* default_instance_;
};
// -------------------------------------------------------------------

class EnterChatRoomNot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.EnterChatRoomNot) */ {
 public:
  EnterChatRoomNot();
  virtual ~EnterChatRoomNot();

  EnterChatRoomNot(const EnterChatRoomNot& from);

  inline EnterChatRoomNot& operator=(const EnterChatRoomNot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterChatRoomNot& default_instance();

  void Swap(EnterChatRoomNot* other);

  // implements Message ----------------------------------------------

  inline EnterChatRoomNot* New() const { return New(NULL); }

  EnterChatRoomNot* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterChatRoomNot& from);
  void MergeFrom(const EnterChatRoomNot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnterChatRoomNot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MSG.EnterChatRoomNot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static EnterChatRoomNot* default_instance_;
};
// -------------------------------------------------------------------

class LeaveChatRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.LeaveChatRoomReq) */ {
 public:
  LeaveChatRoomReq();
  virtual ~LeaveChatRoomReq();

  LeaveChatRoomReq(const LeaveChatRoomReq& from);

  inline LeaveChatRoomReq& operator=(const LeaveChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveChatRoomReq& default_instance();

  void Swap(LeaveChatRoomReq* other);

  // implements Message ----------------------------------------------

  inline LeaveChatRoomReq* New() const { return New(NULL); }

  LeaveChatRoomReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveChatRoomReq& from);
  void MergeFrom(const LeaveChatRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaveChatRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  ::google::protobuf::uint64 rid() const;
  void set_rid(::google::protobuf::uint64 value);

  // optional string rkey = 2;
  void clear_rkey();
  static const int kRkeyFieldNumber = 2;
  const ::std::string& rkey() const;
  void set_rkey(const ::std::string& value);
  void set_rkey(const char* value);
  void set_rkey(const char* value, size_t size);
  ::std::string* mutable_rkey();
  ::std::string* release_rkey();
  void set_allocated_rkey(::std::string* rkey);

  // @@protoc_insertion_point(class_scope:MSG.LeaveChatRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::internal::ArenaStringPtr rkey_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static LeaveChatRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class LeaveChatRoomAns : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.LeaveChatRoomAns) */ {
 public:
  LeaveChatRoomAns();
  virtual ~LeaveChatRoomAns();

  LeaveChatRoomAns(const LeaveChatRoomAns& from);

  inline LeaveChatRoomAns& operator=(const LeaveChatRoomAns& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveChatRoomAns& default_instance();

  void Swap(LeaveChatRoomAns* other);

  // implements Message ----------------------------------------------

  inline LeaveChatRoomAns* New() const { return New(NULL); }

  LeaveChatRoomAns* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveChatRoomAns& from);
  void MergeFrom(const LeaveChatRoomAns& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaveChatRoomAns* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MSG.ErrorCode err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::MSG::ErrorCode err() const;
  void set_err(::MSG::ErrorCode value);

  // @@protoc_insertion_point(class_scope:MSG.LeaveChatRoomAns)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int err_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static LeaveChatRoomAns* default_instance_;
};
// -------------------------------------------------------------------

class LeaveChatRoomNot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MSG.LeaveChatRoomNot) */ {
 public:
  LeaveChatRoomNot();
  virtual ~LeaveChatRoomNot();

  LeaveChatRoomNot(const LeaveChatRoomNot& from);

  inline LeaveChatRoomNot& operator=(const LeaveChatRoomNot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveChatRoomNot& default_instance();

  void Swap(LeaveChatRoomNot* other);

  // implements Message ----------------------------------------------

  inline LeaveChatRoomNot* New() const { return New(NULL); }

  LeaveChatRoomNot* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveChatRoomNot& from);
  void MergeFrom(const LeaveChatRoomNot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaveChatRoomNot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MSG.LeaveChatRoomNot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static LeaveChatRoomNot* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatReq

// optional string msg = 1;
inline void ChatReq::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatReq::msg() const {
  // @@protoc_insertion_point(field_get:MSG.ChatReq.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatReq::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.ChatReq.msg)
}
inline void ChatReq::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.ChatReq.msg)
}
inline void ChatReq::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.ChatReq.msg)
}
inline ::std::string* ChatReq::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:MSG.ChatReq.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatReq::release_msg() {
  // @@protoc_insertion_point(field_release:MSG.ChatReq.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatReq::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:MSG.ChatReq.msg)
}

// optional .MSG.ChatType type = 2;
inline void ChatReq::clear_type() {
  type_ = 0;
}
inline ::MSG::ChatType ChatReq::type() const {
  // @@protoc_insertion_point(field_get:MSG.ChatReq.type)
  return static_cast< ::MSG::ChatType >(type_);
}
inline void ChatReq::set_type(::MSG::ChatType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MSG.ChatReq.type)
}

// -------------------------------------------------------------------

// ChatAns

// optional .MSG.ErrorCode err = 1;
inline void ChatAns::clear_err() {
  err_ = 0;
}
inline ::MSG::ErrorCode ChatAns::err() const {
  // @@protoc_insertion_point(field_get:MSG.ChatAns.err)
  return static_cast< ::MSG::ErrorCode >(err_);
}
inline void ChatAns::set_err(::MSG::ErrorCode value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:MSG.ChatAns.err)
}

// -------------------------------------------------------------------

// ChatNot

// optional .MSG.ChatData_ chats = 1;
inline bool ChatNot::has_chats() const {
  return !_is_default_instance_ && chats_ != NULL;
}
inline void ChatNot::clear_chats() {
  if (GetArenaNoVirtual() == NULL && chats_ != NULL) delete chats_;
  chats_ = NULL;
}
inline const ::MSG::ChatData_& ChatNot::chats() const {
  // @@protoc_insertion_point(field_get:MSG.ChatNot.chats)
  return chats_ != NULL ? *chats_ : *default_instance_->chats_;
}
inline ::MSG::ChatData_* ChatNot::mutable_chats() {
  
  if (chats_ == NULL) {
    chats_ = new ::MSG::ChatData_;
  }
  // @@protoc_insertion_point(field_mutable:MSG.ChatNot.chats)
  return chats_;
}
inline ::MSG::ChatData_* ChatNot::release_chats() {
  // @@protoc_insertion_point(field_release:MSG.ChatNot.chats)
  
  ::MSG::ChatData_* temp = chats_;
  chats_ = NULL;
  return temp;
}
inline void ChatNot::set_allocated_chats(::MSG::ChatData_* chats) {
  delete chats_;
  chats_ = chats;
  if (chats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MSG.ChatNot.chats)
}

// optional .MSG.ChatType type = 2;
inline void ChatNot::clear_type() {
  type_ = 0;
}
inline ::MSG::ChatType ChatNot::type() const {
  // @@protoc_insertion_point(field_get:MSG.ChatNot.type)
  return static_cast< ::MSG::ChatType >(type_);
}
inline void ChatNot::set_type(::MSG::ChatType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MSG.ChatNot.type)
}

// -------------------------------------------------------------------

// CreateChatRoomReq

// optional string name = 1;
inline void CreateChatRoomReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateChatRoomReq::name() const {
  // @@protoc_insertion_point(field_get:MSG.CreateChatRoomReq.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChatRoomReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.CreateChatRoomReq.name)
}
inline void CreateChatRoomReq::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.CreateChatRoomReq.name)
}
inline void CreateChatRoomReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.CreateChatRoomReq.name)
}
inline ::std::string* CreateChatRoomReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MSG.CreateChatRoomReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateChatRoomReq::release_name() {
  // @@protoc_insertion_point(field_release:MSG.CreateChatRoomReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChatRoomReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MSG.CreateChatRoomReq.name)
}

// optional string greeting = 2;
inline void CreateChatRoomReq::clear_greeting() {
  greeting_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateChatRoomReq::greeting() const {
  // @@protoc_insertion_point(field_get:MSG.CreateChatRoomReq.greeting)
  return greeting_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChatRoomReq::set_greeting(const ::std::string& value) {
  
  greeting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.CreateChatRoomReq.greeting)
}
inline void CreateChatRoomReq::set_greeting(const char* value) {
  
  greeting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.CreateChatRoomReq.greeting)
}
inline void CreateChatRoomReq::set_greeting(const char* value, size_t size) {
  
  greeting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.CreateChatRoomReq.greeting)
}
inline ::std::string* CreateChatRoomReq::mutable_greeting() {
  
  // @@protoc_insertion_point(field_mutable:MSG.CreateChatRoomReq.greeting)
  return greeting_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateChatRoomReq::release_greeting() {
  // @@protoc_insertion_point(field_release:MSG.CreateChatRoomReq.greeting)
  
  return greeting_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChatRoomReq::set_allocated_greeting(::std::string* greeting) {
  if (greeting != NULL) {
    
  } else {
    
  }
  greeting_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), greeting);
  // @@protoc_insertion_point(field_set_allocated:MSG.CreateChatRoomReq.greeting)
}

// -------------------------------------------------------------------

// CreateChatRoomAns

// optional .MSG.ErrorCode err = 1;
inline void CreateChatRoomAns::clear_err() {
  err_ = 0;
}
inline ::MSG::ErrorCode CreateChatRoomAns::err() const {
  // @@protoc_insertion_point(field_get:MSG.CreateChatRoomAns.err)
  return static_cast< ::MSG::ErrorCode >(err_);
}
inline void CreateChatRoomAns::set_err(::MSG::ErrorCode value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:MSG.CreateChatRoomAns.err)
}

// optional uint64 rid = 2;
inline void CreateChatRoomAns::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CreateChatRoomAns::rid() const {
  // @@protoc_insertion_point(field_get:MSG.CreateChatRoomAns.rid)
  return rid_;
}
inline void CreateChatRoomAns::set_rid(::google::protobuf::uint64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:MSG.CreateChatRoomAns.rid)
}

// optional string rkey = 3;
inline void CreateChatRoomAns::clear_rkey() {
  rkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateChatRoomAns::rkey() const {
  // @@protoc_insertion_point(field_get:MSG.CreateChatRoomAns.rkey)
  return rkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChatRoomAns::set_rkey(const ::std::string& value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.CreateChatRoomAns.rkey)
}
inline void CreateChatRoomAns::set_rkey(const char* value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.CreateChatRoomAns.rkey)
}
inline void CreateChatRoomAns::set_rkey(const char* value, size_t size) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.CreateChatRoomAns.rkey)
}
inline ::std::string* CreateChatRoomAns::mutable_rkey() {
  
  // @@protoc_insertion_point(field_mutable:MSG.CreateChatRoomAns.rkey)
  return rkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateChatRoomAns::release_rkey() {
  // @@protoc_insertion_point(field_release:MSG.CreateChatRoomAns.rkey)
  
  return rkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChatRoomAns::set_allocated_rkey(::std::string* rkey) {
  if (rkey != NULL) {
    
  } else {
    
  }
  rkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rkey);
  // @@protoc_insertion_point(field_set_allocated:MSG.CreateChatRoomAns.rkey)
}

// -------------------------------------------------------------------

// InviteChatRoomReq

// optional uint64 rid = 1;
inline void InviteChatRoomReq::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InviteChatRoomReq::rid() const {
  // @@protoc_insertion_point(field_get:MSG.InviteChatRoomReq.rid)
  return rid_;
}
inline void InviteChatRoomReq::set_rid(::google::protobuf::uint64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:MSG.InviteChatRoomReq.rid)
}

// optional string rkey = 2;
inline void InviteChatRoomReq::clear_rkey() {
  rkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteChatRoomReq::rkey() const {
  // @@protoc_insertion_point(field_get:MSG.InviteChatRoomReq.rkey)
  return rkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteChatRoomReq::set_rkey(const ::std::string& value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.InviteChatRoomReq.rkey)
}
inline void InviteChatRoomReq::set_rkey(const char* value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.InviteChatRoomReq.rkey)
}
inline void InviteChatRoomReq::set_rkey(const char* value, size_t size) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.InviteChatRoomReq.rkey)
}
inline ::std::string* InviteChatRoomReq::mutable_rkey() {
  
  // @@protoc_insertion_point(field_mutable:MSG.InviteChatRoomReq.rkey)
  return rkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteChatRoomReq::release_rkey() {
  // @@protoc_insertion_point(field_release:MSG.InviteChatRoomReq.rkey)
  
  return rkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteChatRoomReq::set_allocated_rkey(::std::string* rkey) {
  if (rkey != NULL) {
    
  } else {
    
  }
  rkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rkey);
  // @@protoc_insertion_point(field_set_allocated:MSG.InviteChatRoomReq.rkey)
}

// optional uint64 targetUid = 3;
inline void InviteChatRoomReq::clear_targetuid() {
  targetuid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InviteChatRoomReq::targetuid() const {
  // @@protoc_insertion_point(field_get:MSG.InviteChatRoomReq.targetUid)
  return targetuid_;
}
inline void InviteChatRoomReq::set_targetuid(::google::protobuf::uint64 value) {
  
  targetuid_ = value;
  // @@protoc_insertion_point(field_set:MSG.InviteChatRoomReq.targetUid)
}

// optional string targetName = 4;
inline void InviteChatRoomReq::clear_targetname() {
  targetname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteChatRoomReq::targetname() const {
  // @@protoc_insertion_point(field_get:MSG.InviteChatRoomReq.targetName)
  return targetname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteChatRoomReq::set_targetname(const ::std::string& value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.InviteChatRoomReq.targetName)
}
inline void InviteChatRoomReq::set_targetname(const char* value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.InviteChatRoomReq.targetName)
}
inline void InviteChatRoomReq::set_targetname(const char* value, size_t size) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.InviteChatRoomReq.targetName)
}
inline ::std::string* InviteChatRoomReq::mutable_targetname() {
  
  // @@protoc_insertion_point(field_mutable:MSG.InviteChatRoomReq.targetName)
  return targetname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteChatRoomReq::release_targetname() {
  // @@protoc_insertion_point(field_release:MSG.InviteChatRoomReq.targetName)
  
  return targetname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteChatRoomReq::set_allocated_targetname(::std::string* targetname) {
  if (targetname != NULL) {
    
  } else {
    
  }
  targetname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetname);
  // @@protoc_insertion_point(field_set_allocated:MSG.InviteChatRoomReq.targetName)
}

// -------------------------------------------------------------------

// InviteChatRoomAns

// optional .MSG.ErrorCode err = 1;
inline void InviteChatRoomAns::clear_err() {
  err_ = 0;
}
inline ::MSG::ErrorCode InviteChatRoomAns::err() const {
  // @@protoc_insertion_point(field_get:MSG.InviteChatRoomAns.err)
  return static_cast< ::MSG::ErrorCode >(err_);
}
inline void InviteChatRoomAns::set_err(::MSG::ErrorCode value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:MSG.InviteChatRoomAns.err)
}

// -------------------------------------------------------------------

// InviteChatRoomNot

// optional uint64 rid = 1;
inline void InviteChatRoomNot::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InviteChatRoomNot::rid() const {
  // @@protoc_insertion_point(field_get:MSG.InviteChatRoomNot.rid)
  return rid_;
}
inline void InviteChatRoomNot::set_rid(::google::protobuf::uint64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:MSG.InviteChatRoomNot.rid)
}

// optional string rkey = 2;
inline void InviteChatRoomNot::clear_rkey() {
  rkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteChatRoomNot::rkey() const {
  // @@protoc_insertion_point(field_get:MSG.InviteChatRoomNot.rkey)
  return rkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteChatRoomNot::set_rkey(const ::std::string& value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.InviteChatRoomNot.rkey)
}
inline void InviteChatRoomNot::set_rkey(const char* value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.InviteChatRoomNot.rkey)
}
inline void InviteChatRoomNot::set_rkey(const char* value, size_t size) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.InviteChatRoomNot.rkey)
}
inline ::std::string* InviteChatRoomNot::mutable_rkey() {
  
  // @@protoc_insertion_point(field_mutable:MSG.InviteChatRoomNot.rkey)
  return rkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteChatRoomNot::release_rkey() {
  // @@protoc_insertion_point(field_release:MSG.InviteChatRoomNot.rkey)
  
  return rkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteChatRoomNot::set_allocated_rkey(::std::string* rkey) {
  if (rkey != NULL) {
    
  } else {
    
  }
  rkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rkey);
  // @@protoc_insertion_point(field_set_allocated:MSG.InviteChatRoomNot.rkey)
}

// optional uint64 ownerUid = 3;
inline void InviteChatRoomNot::clear_owneruid() {
  owneruid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InviteChatRoomNot::owneruid() const {
  // @@protoc_insertion_point(field_get:MSG.InviteChatRoomNot.ownerUid)
  return owneruid_;
}
inline void InviteChatRoomNot::set_owneruid(::google::protobuf::uint64 value) {
  
  owneruid_ = value;
  // @@protoc_insertion_point(field_set:MSG.InviteChatRoomNot.ownerUid)
}

// optional string ownerName = 4;
inline void InviteChatRoomNot::clear_ownername() {
  ownername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteChatRoomNot::ownername() const {
  // @@protoc_insertion_point(field_get:MSG.InviteChatRoomNot.ownerName)
  return ownername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteChatRoomNot::set_ownername(const ::std::string& value) {
  
  ownername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.InviteChatRoomNot.ownerName)
}
inline void InviteChatRoomNot::set_ownername(const char* value) {
  
  ownername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.InviteChatRoomNot.ownerName)
}
inline void InviteChatRoomNot::set_ownername(const char* value, size_t size) {
  
  ownername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.InviteChatRoomNot.ownerName)
}
inline ::std::string* InviteChatRoomNot::mutable_ownername() {
  
  // @@protoc_insertion_point(field_mutable:MSG.InviteChatRoomNot.ownerName)
  return ownername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteChatRoomNot::release_ownername() {
  // @@protoc_insertion_point(field_release:MSG.InviteChatRoomNot.ownerName)
  
  return ownername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteChatRoomNot::set_allocated_ownername(::std::string* ownername) {
  if (ownername != NULL) {
    
  } else {
    
  }
  ownername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ownername);
  // @@protoc_insertion_point(field_set_allocated:MSG.InviteChatRoomNot.ownerName)
}

// -------------------------------------------------------------------

// EnterChatRoomReq

// optional uint64 rid = 1;
inline void EnterChatRoomReq::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EnterChatRoomReq::rid() const {
  // @@protoc_insertion_point(field_get:MSG.EnterChatRoomReq.rid)
  return rid_;
}
inline void EnterChatRoomReq::set_rid(::google::protobuf::uint64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:MSG.EnterChatRoomReq.rid)
}

// optional string rkey = 2;
inline void EnterChatRoomReq::clear_rkey() {
  rkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnterChatRoomReq::rkey() const {
  // @@protoc_insertion_point(field_get:MSG.EnterChatRoomReq.rkey)
  return rkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterChatRoomReq::set_rkey(const ::std::string& value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.EnterChatRoomReq.rkey)
}
inline void EnterChatRoomReq::set_rkey(const char* value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.EnterChatRoomReq.rkey)
}
inline void EnterChatRoomReq::set_rkey(const char* value, size_t size) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.EnterChatRoomReq.rkey)
}
inline ::std::string* EnterChatRoomReq::mutable_rkey() {
  
  // @@protoc_insertion_point(field_mutable:MSG.EnterChatRoomReq.rkey)
  return rkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnterChatRoomReq::release_rkey() {
  // @@protoc_insertion_point(field_release:MSG.EnterChatRoomReq.rkey)
  
  return rkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterChatRoomReq::set_allocated_rkey(::std::string* rkey) {
  if (rkey != NULL) {
    
  } else {
    
  }
  rkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rkey);
  // @@protoc_insertion_point(field_set_allocated:MSG.EnterChatRoomReq.rkey)
}

// -------------------------------------------------------------------

// EnterChatRoomAns

// optional .MSG.ErrorCode err = 1;
inline void EnterChatRoomAns::clear_err() {
  err_ = 0;
}
inline ::MSG::ErrorCode EnterChatRoomAns::err() const {
  // @@protoc_insertion_point(field_get:MSG.EnterChatRoomAns.err)
  return static_cast< ::MSG::ErrorCode >(err_);
}
inline void EnterChatRoomAns::set_err(::MSG::ErrorCode value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:MSG.EnterChatRoomAns.err)
}

// -------------------------------------------------------------------

// EnterChatRoomNot

// optional uint64 uid = 1;
inline void EnterChatRoomNot::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EnterChatRoomNot::uid() const {
  // @@protoc_insertion_point(field_get:MSG.EnterChatRoomNot.uid)
  return uid_;
}
inline void EnterChatRoomNot::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:MSG.EnterChatRoomNot.uid)
}

// optional string name = 2;
inline void EnterChatRoomNot::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnterChatRoomNot::name() const {
  // @@protoc_insertion_point(field_get:MSG.EnterChatRoomNot.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterChatRoomNot::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.EnterChatRoomNot.name)
}
inline void EnterChatRoomNot::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.EnterChatRoomNot.name)
}
inline void EnterChatRoomNot::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.EnterChatRoomNot.name)
}
inline ::std::string* EnterChatRoomNot::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MSG.EnterChatRoomNot.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnterChatRoomNot::release_name() {
  // @@protoc_insertion_point(field_release:MSG.EnterChatRoomNot.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterChatRoomNot::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MSG.EnterChatRoomNot.name)
}

// -------------------------------------------------------------------

// LeaveChatRoomReq

// optional uint64 rid = 1;
inline void LeaveChatRoomReq::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LeaveChatRoomReq::rid() const {
  // @@protoc_insertion_point(field_get:MSG.LeaveChatRoomReq.rid)
  return rid_;
}
inline void LeaveChatRoomReq::set_rid(::google::protobuf::uint64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:MSG.LeaveChatRoomReq.rid)
}

// optional string rkey = 2;
inline void LeaveChatRoomReq::clear_rkey() {
  rkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaveChatRoomReq::rkey() const {
  // @@protoc_insertion_point(field_get:MSG.LeaveChatRoomReq.rkey)
  return rkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveChatRoomReq::set_rkey(const ::std::string& value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.LeaveChatRoomReq.rkey)
}
inline void LeaveChatRoomReq::set_rkey(const char* value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.LeaveChatRoomReq.rkey)
}
inline void LeaveChatRoomReq::set_rkey(const char* value, size_t size) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.LeaveChatRoomReq.rkey)
}
inline ::std::string* LeaveChatRoomReq::mutable_rkey() {
  
  // @@protoc_insertion_point(field_mutable:MSG.LeaveChatRoomReq.rkey)
  return rkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaveChatRoomReq::release_rkey() {
  // @@protoc_insertion_point(field_release:MSG.LeaveChatRoomReq.rkey)
  
  return rkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveChatRoomReq::set_allocated_rkey(::std::string* rkey) {
  if (rkey != NULL) {
    
  } else {
    
  }
  rkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rkey);
  // @@protoc_insertion_point(field_set_allocated:MSG.LeaveChatRoomReq.rkey)
}

// -------------------------------------------------------------------

// LeaveChatRoomAns

// optional .MSG.ErrorCode err = 1;
inline void LeaveChatRoomAns::clear_err() {
  err_ = 0;
}
inline ::MSG::ErrorCode LeaveChatRoomAns::err() const {
  // @@protoc_insertion_point(field_get:MSG.LeaveChatRoomAns.err)
  return static_cast< ::MSG::ErrorCode >(err_);
}
inline void LeaveChatRoomAns::set_err(::MSG::ErrorCode value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:MSG.LeaveChatRoomAns.err)
}

// -------------------------------------------------------------------

// LeaveChatRoomNot

// optional uint64 uid = 1;
inline void LeaveChatRoomNot::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LeaveChatRoomNot::uid() const {
  // @@protoc_insertion_point(field_get:MSG.LeaveChatRoomNot.uid)
  return uid_;
}
inline void LeaveChatRoomNot::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:MSG.LeaveChatRoomNot.uid)
}

// optional string name = 2;
inline void LeaveChatRoomNot::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaveChatRoomNot::name() const {
  // @@protoc_insertion_point(field_get:MSG.LeaveChatRoomNot.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveChatRoomNot::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSG.LeaveChatRoomNot.name)
}
inline void LeaveChatRoomNot::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSG.LeaveChatRoomNot.name)
}
inline void LeaveChatRoomNot::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSG.LeaveChatRoomNot.name)
}
inline ::std::string* LeaveChatRoomNot::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MSG.LeaveChatRoomNot.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaveChatRoomNot::release_name() {
  // @@protoc_insertion_point(field_release:MSG.LeaveChatRoomNot.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveChatRoomNot::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MSG.LeaveChatRoomNot.name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MSG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
